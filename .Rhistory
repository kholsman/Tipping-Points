hat_qnt%>%select(tmp,up=smoothed_up, mn=smoothed_mn, dwn=smoothed_dwn)%>%mutate(method="smoothed")))+
geom_ribbon(aes(x=tmp, ymin=dwn, ymax=up,fill=method))+
facet_grid(method~.)+
scale_fill_viridis_d(begin = .8, end=0)+
theme_minimal()
ggplot(rbind(
hat_qnt%>%select(TempC=tmp,up, mn, dwn)%>%mutate(method="not smoothed"),
hat_qnt%>%select(TempC=tmp,up=smoothed_up, mn=smoothed_mn, dwn=smoothed_dwn)%>%mutate(method="smoothed")))+
geom_ribbon(aes(x=TempC, ymin=dwn, ymax=up,fill=method))+
facet_grid(method~.)+
scale_fill_viridis_d(begin = .8, end=0)+
theme_minimal()
ggplot(rbind(
hat_qnt%>%select(TempC = tmp,up=smoothed_up,
mn=smoothed_mn, dwn=smoothed_dwn)%>%mutate(method="a) smoothed gam (s(x))"),
df1_qnt%>%select(TempC = tmp,up=smoothed_up,
mn=smoothed_mn, dwn=smoothed_dwn)%>%mutate(method="b) First Deriv (s'(x)")))+
geom_ribbon(aes(x=TempC, ymin=dwn, ymax=up,fill=method))+facet_grid(method~.,scales="free_y")+
scale_fill_viridis_d(begin = .8, end=.1)+
theme_minimal()
source("R/make.R")  # set up the Rcode and load packages and data
head(risk12)  # preview the risk table for "No cap" simulations
head(risk13)  # preview the risk table for "2 MT cap" simulations
C_thresh_12_1$thrsh_x # Temperature tipping point for pollock under "No cap" simulations
C_thresh_12_2$thrsh_x # Temperature tipping point for p cod under "No cap" simulations
C_thresh_12_3$thrsh_x # No tipping point was found for arrowtooth under "No cap" simulations
tmp <- list("No Cap" = c(
C_thresh_12_1$thrsh_x,
C_thresh_12_2$thrsh_x,
C_thresh_12_3$thrsh_x),
"2 MT Cap" = c(
C_thresh_13_1$thrsh_x,
C_thresh_13_2$thrsh_x,
C_thresh_13_3$thrsh_x))
# get mean and var for tipping points:
mean(as.numeric(unlist(tmp)))
sd(as.numeric(unlist(tmp)))
# double check:
threshIN     <- C_thresh_13_2
thrsh2_all   <- intersect(threshIN$signif2,threshIN$ix_pks)
df2_qnt      <- threshIN$df2_qnt
df2_qnt$tmp[(thrsh2_all[which( abs(df2_qnt$smoothed_mn[thrsh2_all])  ==
max(abs(df2_qnt$smoothed_mn[thrsh2_all])) ) ] ) ]
df2_qnt$tmp[(thrsh2_all[which( abs(df2_qnt$smoothed_dwn[thrsh2_all]) ==
max(abs(df2_qnt$smoothed_dwn[thrsh2_all])) )])  ]
df2_qnt$tmp[(thrsh2_all[which( abs(df2_qnt$smoothed_up[thrsh2_all])  ==
max(abs(df2_qnt$smoothed_up[thrsh2_all]))  )])  ]
datIN <- B_thresh_12_1$datIN
x     <- seq(-3,10,.1)
# Fit gam
#------------------------------------
tmp_gam   <-  gam(delta_var_prcnt ~ s(TempC,k=t_knots,bs="tp"),data = datIN)
hat       <-  predict(tmp_gam,se.fit=TRUE, newdata = data.frame(TempC=x) )
dd        <-  datIN%>%mutate(TempC = round(TempC,2) )%>%select(TempC, delta_var_prcnt)
dd$num    <-  1:length(dd[,1])
head(datIN)
# pre-allocate NA Matrix
# ------------------------------------
Deriv1 <-
Deriv2 <-
hatFit <-
hatse  <- matrix(NA,boot_nobsIN,length(x))
gmlist <- list()
boot_n    <- 1000 # number of bootstrap runs
boot_nobs <- 1000 # optional subsample, if boot_nobs > sample nobs, is set = sample nobs
knotsIN   <- t_knots # number of knots, set to 4 in Holsman et al. 2020
sdmult   <- 1 # 1 sd
method   <- methodIN  # Holsman et al. 2020 used method 2
probIN   <-  c(.025,.5,.975) # probablities for the quantile ranges
spanIN   <- span_set  # default set to 0.1
# Run the boot strap
# ------------------------------------
pb <- progress_bar$new(total = boot_n)
for(int in 1:boot_n){
pb$tick()
# get bootstraped sub-sample
nobs          <- length(dd$num)
if(boot_nobs > nobs)
boot_nobs   <- nobs
bootd         <- sample_n(dd,boot_nobs,replace = TRUE)
tmpgam        <- gam(delta_var_prcnt~s(TempC,k=knotsIN,bs="tp"),data = bootd)
tmpd          <- deriv2(tmpgam,simdat=x)
gmlist[[int]] <- tmpgam
Deriv1[int,]  <- tmpd$fd_d1
Deriv2[int,]  <- tmpd$fd_d2
hatFit[int,]  <- predict(tmpgam,se.fit=TRUE,newdata=data.frame(TempC=x))$fit
hatse[int,]   <- predict(tmpgam,se.fit=TRUE,newdata=data.frame(TempC=x))$se
}
# apply quantiles to bootstrap replicates
D1_se  <- apply(Deriv1,2,quantile,probs=probIN)
D2_se  <- apply(Deriv2,2,quantile,probs=probIN)
qnt    <- apply(hatFit,2,quantile,probs=probIN)
qntse  <- apply(hatse,2,quantile,probs=probIN)
nobs   <- length(x)
# first to the gam using 1-3 methods
hat_qnt1 <- data.frame(tmp = x,
up  = hat$fit+qnt[3,]-qnt[2,],
mn  = hat$fit,
dwn = hat$fit+qnt[1,]-qnt[2,],
method = "Method 1")
hat_qnt2 <- data.frame(tmp = x,
up  = hat$fit+sdmult*qntse[2,],
mn  = hat$fit,
dwn = hat$fit-sdmult*qntse[2,],
method = "Method 2")
hat_qnt3 <- data.frame(tmp = x,
up  = hat$fit+sdmult*hat$se,
mn  = hat$fit,
dwn = hat$fit-sdmult*hat$se,
method = "Method 3")
ggplot(rbind(hat_qnt1,hat_qnt2,hat_qnt3))+
geom_ribbon(aes(x=tmp, ymin=dwn, ymax=up,fill=method))+facet_grid(method~.)+
scale_fill_viridis_d(begin = .8, end=0)+
theme_minimal()
# use method 2
hat_qnt <- hat_qnt2
hat_qnt$smoothed_mn  <- predict(loess(mn ~ tmp, data=hat_qnt, span=spanIN))
hat_qnt$smoothed_dwn <- predict(loess(dwn ~ tmp, data=hat_qnt, span=spanIN))
hat_qnt$smoothed_up  <- predict(loess(up ~ tmp, data=hat_qnt, span=spanIN))
ggplot(rbind(
hat_qnt%>%select(TempC=tmp,up, mn, dwn)%>%mutate(method="not smoothed"),
hat_qnt%>%select(TempC=tmp,up=smoothed_up, mn=smoothed_mn, dwn=smoothed_dwn)%>%mutate(method="smoothed")))+
geom_ribbon(aes(x=TempC, ymin=dwn, ymax=up,fill=method))+
facet_grid(method~.)+
scale_fill_viridis_d(begin = .8, end=0)+
theme_minimal()
# first derivative quantiles
df1_qnt<-data.frame(tmp = x,
up  = D1_se[3,],
mn  = D1_se[2,],
dwn = D1_se[1,])
# second derivative quantiles
df2_qnt<-data.frame(tmp = x,
up  = D2_se[3,],
mn  = D2_se[2,],
dwn = D2_se[1,])
ggplot(rbind(
hat_qnt%>%select(TempC = tmp,up=smoothed_up,
mn=smoothed_mn, dwn=smoothed_dwn)%>%mutate(method="a) smoothed gam (s(x))"),
df1_qnt%>%select(TempC = tmp,up=smoothed_up,
mn=smoothed_mn, dwn=smoothed_dwn)%>%mutate(method="b) First Deriv (s'(x)")))+
geom_ribbon(aes(x=TempC, ymin=dwn, ymax=up,fill=method))+facet_grid(method~.,scales="free_y")+
scale_fill_viridis_d(begin = .8, end=.1)+
theme_minimal()
(rbind(
hat_qnt%>%select(TempC = tmp,up=smoothed_up,
mn=smoothed_mn, dwn=smoothed_dwn)%>%mutate(method="a) smoothed gam (s(x))"),
df1_qnt%>%select(TempC = tmp,up=smoothed_up,
mn=smoothed_mn, dwn=smoothed_dwn)%>%mutate(method="b) First Deriv (s'(x)"))
)
names(hat_qnt)
names(df1_qnt)
# pre-allocate NA Matrix
# ------------------------------------
Deriv1 <-
Deriv2 <-
hatFit <-
hatse  <- matrix(NA,boot_nobsIN,length(x))
gmlist <- list()
boot_n    <- 1000 # number of bootstrap runs
boot_nobs <- 1000 # optional subsample, if boot_nobs > sample nobs, is set = sample nobs
knotsIN   <- t_knots # number of knots, set to 4 in Holsman et al. 2020
sdmult   <- 1 # 1 sd
method   <- methodIN  # Holsman et al. 2020 used method 2
probIN   <-  c(.025,.5,.975) # probablities for the quantile ranges
spanIN   <- span_set  # default set to 0.1
# Run the boot strap
# ------------------------------------
pb <- progress_bar$new(total = boot_n)
for(int in 1:boot_n){
pb$tick()
# get bootstraped sub-sample
nobs          <- length(dd$num)
if(boot_nobs > nobs)
boot_nobs   <- nobs
bootd         <- sample_n(dd,boot_nobs,replace = TRUE)
tmpgam        <- gam(delta_var_prcnt~s(TempC,k=knotsIN,bs="tp"),data = bootd)
tmpd          <- deriv2(tmpgam,simdat=x)
gmlist[[int]] <- tmpgam
Deriv1[int,]  <- tmpd$fd_d1
Deriv2[int,]  <- tmpd$fd_d2
hatFit[int,]  <- predict(tmpgam,se.fit=TRUE,newdata=data.frame(TempC=x))$fit
hatse[int,]   <- predict(tmpgam,se.fit=TRUE,newdata=data.frame(TempC=x))$se
}
# apply quantiles to bootstrap replicates
D1_se  <- apply(Deriv1,2,quantile,probs=probIN)
D2_se  <- apply(Deriv2,2,quantile,probs=probIN)
qnt    <- apply(hatFit,2,quantile,probs=probIN)
qntse  <- apply(hatse,2,quantile,probs=probIN)
nobs   <- length(x)
# first to the gam using 1-3 methods
hat_qnt1 <- data.frame(tmp = x,
up  = hat$fit+qnt[3,]-qnt[2,],
mn  = hat$fit,
dwn = hat$fit+qnt[1,]-qnt[2,],
method = "Method 1")
hat_qnt2 <- data.frame(tmp = x,
up  = hat$fit+sdmult*qntse[2,],
mn  = hat$fit,
dwn = hat$fit-sdmult*qntse[2,],
method = "Method 2")
hat_qnt3 <- data.frame(tmp = x,
up  = hat$fit+sdmult*hat$se,
mn  = hat$fit,
dwn = hat$fit-sdmult*hat$se,
method = "Method 3")
ggplot(rbind(hat_qnt1,hat_qnt2,hat_qnt3))+
geom_ribbon(aes(x=tmp, ymin=dwn, ymax=up,fill=method))+facet_grid(method~.)+
scale_fill_viridis_d(begin = .8, end=0)+
theme_minimal()
# use method 2
hat_qnt <- hat_qnt2
hat_qnt$smoothed_mn  <- predict(loess(mn ~ tmp, data=hat_qnt, span=spanIN))
hat_qnt$smoothed_dwn <- predict(loess(dwn ~ tmp, data=hat_qnt, span=spanIN))
hat_qnt$smoothed_up  <- predict(loess(up ~ tmp, data=hat_qnt, span=spanIN))
ggplot(rbind(
hat_qnt%>%select(TempC=tmp,up, mn, dwn)%>%mutate(method="not smoothed"),
hat_qnt%>%select(TempC=tmp,up=smoothed_up, mn=smoothed_mn, dwn=smoothed_dwn)%>%mutate(method="smoothed")))+
geom_ribbon(aes(x=TempC, ymin=dwn, ymax=up,fill=method))+
facet_grid(method~.)+
scale_fill_viridis_d(begin = .8, end=0)+
theme_minimal()
# first derivative quantiles
df1_qnt<-data.frame(tmp = x,
up  = D1_se[3,],
mn  = D1_se[2,],
dwn = D1_se[1,])
# second derivative quantiles
df2_qnt<-data.frame(tmp = x,
up  = D2_se[3,],
mn  = D2_se[2,],
dwn = D2_se[1,])
# get difference in signs
getdelta<-function(xx,rnd = rndN2){
nn        <- length(xx)
xx        <- round(xx,rndN2)
delta     <- rep(NA,nn)
updn      <- c(0, diff(sign(xx)))
#updn[xx==0]<-0
ix        <- which(updn != 0)
#(xx[ix] + xx[ix-1])/2
sign(updn)[ix]
delta[ix] <- 1
return(list(delta=delta,ix=ix,updn=updn,xx=xx))
}
# determine peaks and valleys:
# 10% smoothing span
df1_qnt$smoothed_mn  <- predict(loess(mn  ~ tmp, data=df1_qnt, span=spanIN))
df1_qnt$smoothed_dwn <- predict(loess(dwn ~ tmp, data=df1_qnt, span=spanIN))
df1_qnt$smoothed_up  <- predict(loess(up  ~ tmp, data=df1_qnt, span=spanIN))
ggplot(rbind(
hat_qnt%>%select(TempC = tmp,up=smoothed_up, mn=smoothed_mn, dwn=smoothed_dwn)%>%mutate(method="a) smoothed gam (s(x))"),
df1_qnt%>%select(TempC = tmp,up=smoothed_up, mn=smoothed_mn, dwn=smoothed_dwn)%>%mutate(method="b) First Deriv (s'(x)")))+
geom_ribbon(aes(x=TempC, ymin=dwn, ymax=up,fill=method))+facet_grid(method~.,scales="free_y")+
scale_fill_viridis_d(begin = .8, end=.1)+
theme_minimal()
pks1    <- sort(c(findPeaks(df1_qnt$smoothed_mn),findPeaks(-df1_qnt$smoothed_mn)))
signif1 <- which(!data.table::between(0, df1_qnt$dwn, df1_qnt$up, incbounds=TRUE))
thrsh1  <- intersect(which(!data.table::between(0, df1_qnt$dwn, df1_qnt$up, incbounds=TRUE)),pks1)
df1_qnt$tmp[thrsh1]
# 10% smoothing span
df2_qnt$smoothed_mn  <- predict(loess(mn ~ tmp, data=df2_qnt, span=spanIN))
df2_qnt$smoothed_dwn <- predict(loess(dwn ~ tmp, data=df2_qnt, span=spanIN))
df2_qnt$smoothed_up  <- predict(loess(up ~ tmp, data=df2_qnt, span=spanIN))
pks2     <- sort(c(findPeaks(df2_qnt$smoothed_mn),findPeaks(-df2_qnt$smoothed_mn)))
pks2_up  <- sort(c(findPeaks(df2_qnt$smoothed_up),findPeaks(-df2_qnt$smoothed_up)))
pks2_dwn <- sort(c(findPeaks(df2_qnt$smoothed_dwn),findPeaks(-df2_qnt$smoothed_dwn)))
hat_qnt$sig <-  df1_qnt$sig <- FALSE
df2_qnt$sig <- !between(0, df2_qnt$dwn, df2_qnt$up, incbounds=TRUE)
signif2  <- which(!between(0, df2_qnt$dwn, df2_qnt$up, incbounds=TRUE))
thrsh2_all <- intersect(signif2,pks2)
thrsh2 <-  which(1==10)
if(length(thrsh2_all)>0)
thrsh2<-mean(thrsh2_all[which(abs(df2_qnt$smoothed_mn[thrsh2_all])==max(abs(df2_qnt$smoothed_mn[thrsh2_all])))],na.rm=T)
pp<- ggplot(rbind(
hat_qnt%>%select(TempC = tmp,up=smoothed_up, mn=smoothed_mn,
dwn=smoothed_dwn,sig)%>%mutate(method="a) smoothed gam (s(x))"),
df1_qnt%>%select(TempC = tmp,up=smoothed_up, mn=smoothed_mn,
dwn=smoothed_dwn,sig)%>%mutate(method="b) First Deriv (s'(x)"),
df2_qnt%>%select(TempC = tmp,up=smoothed_up, mn=smoothed_mn,
dwn=smoothed_dwn,sig)%>%mutate(method="c) Second Deriv (s''(x)")))+
geom_ribbon(aes(x=TempC, ymin=dwn, ymax=up,fill=method))+facet_grid(method~.,scales="free_y")+
geom_hline(yintercept=0,color="white")+
scale_fill_viridis_d(begin = .8, end=.1)+
theme_minimal()
pp + geom_mark_rect(aes(x=TempC, y=up,fill = sig, label = "sig. range"))+
geom_vline (xintercept =df2_qnt$tmp[thrsh2], color = "red")
# now use the threshold function to do the above:
B_thresh_12_1_test  <-  threshold(datIN = datIN,
knotsIN=t_knots,
simul_set=c(5,6,8,9,10,11),
boot_nobs=boot_nobsIN,
rndN=rndNIN,
method=methodIN,
boot_n=nitrIN)
#setwd("/Users/kholsman/Documents/GitHub/Tipping-Points")
file.remove(paste0("index",".html"))
# update github
file.copy(from=paste0("Tipping_points_getstarted",".html"),to=paste0("index",".html"),overwrite=T)
# file.copy(from=paste0("ACLIM2_quickStart",".md"),to=paste0("README",".md"),overwrite=T)
# file.remove(paste0("README",".md"))
#setwd("/Users/kholsman/Documents/GitHub/Tipping-Points")
file.remove(paste0("index",".html"))
# update github
file.copy(from=paste0("Tipping_points_getstarted",".html"),to=paste0("index",".html"),overwrite=T)
# copy and paste this into R window (won't work within markdown)
rmd2md(rmd_fl = "Tipping_points_getstarted",md_fl = "README")
source("D:/GitHub_cloud/Tipping-Points/R/sub_fun/rmd2md.R")
# source("R/make.R")
# copy and paste this into R window (won't work within markdown)
rmd2md(rmd_fl = "Tipping_points_getstarted",md_fl = "README")
Biom_tmp <- list("No Cap" = c(
B_thresh_12_1$thrsh_x,
B_thresh_12_2$thrsh_x,
B_thresh_12_3$thrsh_x),
"2 MT Cap" = c(
B_thresh_13_1$thrsh_x,
B_thresh_13_2$thrsh_x,
B_thresh_13_3$thrsh_x))
Biom_tmp
B_thresh_12_2$thrsh_x
datIN <- B_thresh_12_2$datIN
x     <- seq(-3,10,.1)
# Fit gam
#------------------------------------
tmp_gam   <-  gam(delta_var_prcnt ~ s(TempC,k=t_knots,bs="tp"),data = datIN)
hat       <-  predict(tmp_gam,se.fit=TRUE, newdata = data.frame(TempC=x) )
dd        <-  datIN%>%mutate(TempC = round(TempC,2) )%>%select(TempC, delta_var_prcnt)
dd$num    <-  1:length(dd[,1])
Deriv1 <-
Deriv2 <-
hatFit <-
hatse  <- matrix(NA,boot_nobsIN,length(x))
gmlist <- list()
boot_n    <- 1000 # number of bootstrap runs
boot_nobs <- 1000 # optional subsample, if boot_nobs > sample nobs, is set = sample nobs
knotsIN   <- t_knots # number of knots, set to 4 in Holsman et al. 2020
sdmult   <- 1 # 1 sd
method   <- methodIN  # Holsman et al. 2020 used method 2
probIN   <-  c(.025,.5,.975) # probablities for the quantile ranges
spanIN   <- span_set  # default set to 0.1
# Run the boot strap
# ------------------------------------
pb <- progress_bar$new(total = boot_n)
for(int in 1:boot_n){
pb$tick()
# get bootstraped sub-sample
nobs          <- length(dd$num)
if(boot_nobs > nobs)
boot_nobs   <- nobs
bootd         <- sample_n(dd,boot_nobs,replace = TRUE)
tmpgam        <- gam(delta_var_prcnt~s(TempC,k=knotsIN,bs="tp"),data = bootd)
tmpd          <- deriv2(tmpgam,simdat=x)
gmlist[[int]] <- tmpgam
Deriv1[int,]  <- tmpd$fd_d1
Deriv2[int,]  <- tmpd$fd_d2
hatFit[int,]  <- predict(tmpgam,se.fit=TRUE,newdata=data.frame(TempC=x))$fit
hatse[int,]   <- predict(tmpgam,se.fit=TRUE,newdata=data.frame(TempC=x))$se
}
# apply quantiles to bootstrap replicates
D1_se  <- apply(Deriv1,2,quantile,probs=probIN)
D2_se  <- apply(Deriv2,2,quantile,probs=probIN)
qnt    <- apply(hatFit,2,quantile,probs=probIN)
qntse  <- apply(hatse,2,quantile,probs=probIN)
nobs   <- length(x)
# first to the gam using 1-3 methods
hat_qnt1 <- data.frame(tmp = x,
up  = hat$fit+qnt[3,]-qnt[2,],
mn  = hat$fit,
dwn = hat$fit+qnt[1,]-qnt[2,],
method = "Method 1")
hat_qnt2 <- data.frame(tmp = x,
up  = hat$fit+sdmult*qntse[2,],
mn  = hat$fit,
dwn = hat$fit-sdmult*qntse[2,],
method = "Method 2")
hat_qnt3 <- data.frame(tmp = x,
up  = hat$fit+sdmult*hat$se,
mn  = hat$fit,
dwn = hat$fit-sdmult*hat$se,
method = "Method 3")
ggplot(rbind(hat_qnt1,hat_qnt2,hat_qnt3))+
geom_ribbon(aes(x=tmp, ymin=dwn, ymax=up,fill=method))+facet_grid(method~.)+
scale_fill_viridis_d(begin = .8, end=0)+
theme_minimal()
# use method 2
hat_qnt <- hat_qnt2
hat_qnt$smoothed_mn  <- predict(loess(mn ~ tmp, data=hat_qnt, span=spanIN))
hat_qnt$smoothed_dwn <- predict(loess(dwn ~ tmp, data=hat_qnt, span=spanIN))
hat_qnt$smoothed_up  <- predict(loess(up ~ tmp, data=hat_qnt, span=spanIN))
ggplot(rbind(
hat_qnt%>%select(TempC=tmp,up, mn, dwn)%>%mutate(method="not smoothed"),
hat_qnt%>%select(TempC=tmp,up=smoothed_up, mn=smoothed_mn, dwn=smoothed_dwn)%>%mutate(method="smoothed")))+
geom_ribbon(aes(x=TempC, ymin=dwn, ymax=up,fill=method))+
facet_grid(method~.)+
scale_fill_viridis_d(begin = .8, end=0)+
theme_minimal()
# first derivative quantiles
df1_qnt<-data.frame(tmp = x,
up  = D1_se[3,],
mn  = D1_se[2,],
dwn = D1_se[1,])
# second derivative quantiles
df2_qnt<-data.frame(tmp = x,
up  = D2_se[3,],
mn  = D2_se[2,],
dwn = D2_se[1,])
# get difference in signs
getdelta<-function(xx,rnd = rndN2){
nn        <- length(xx)
xx        <- round(xx,rndN2)
delta     <- rep(NA,nn)
updn      <- c(0, diff(sign(xx)))
#updn[xx==0]<-0
ix        <- which(updn != 0)
#(xx[ix] + xx[ix-1])/2
sign(updn)[ix]
delta[ix] <- 1
return(list(delta=delta,ix=ix,updn=updn,xx=xx))
}
# determine peaks and valleys:
# 10% smoothing span
df1_qnt$smoothed_mn  <- predict(loess(mn  ~ tmp, data=df1_qnt, span=spanIN))
df1_qnt$smoothed_dwn <- predict(loess(dwn ~ tmp, data=df1_qnt, span=spanIN))
df1_qnt$smoothed_up  <- predict(loess(up  ~ tmp, data=df1_qnt, span=spanIN))
ggplot(rbind(
hat_qnt%>%select(TempC = tmp,up=smoothed_up, mn=smoothed_mn, dwn=smoothed_dwn)%>%mutate(method="a) smoothed gam (s(x))"),
df1_qnt%>%select(TempC = tmp,up=smoothed_up, mn=smoothed_mn, dwn=smoothed_dwn)%>%mutate(method="b) First Deriv (s'(x)")))+
geom_ribbon(aes(x=TempC, ymin=dwn, ymax=up,fill=method))+facet_grid(method~.,scales="free_y")+
scale_fill_viridis_d(begin = .8, end=.1)+
theme_minimal()
pks1    <- sort(c(findPeaks(df1_qnt$smoothed_mn),findPeaks(-df1_qnt$smoothed_mn)))
signif1 <- which(!data.table::between(0, df1_qnt$dwn, df1_qnt$up, incbounds=TRUE))
thrsh1  <- intersect(which(!data.table::between(0, df1_qnt$dwn, df1_qnt$up, incbounds=TRUE)),pks1)
df1_qnt$tmp[thrsh1]
# 10% smoothing span
df2_qnt$smoothed_mn  <- predict(loess(mn ~ tmp, data=df2_qnt, span=spanIN))
df2_qnt$smoothed_dwn <- predict(loess(dwn ~ tmp, data=df2_qnt, span=spanIN))
df2_qnt$smoothed_up  <- predict(loess(up ~ tmp, data=df2_qnt, span=spanIN))
pks2     <- sort(c(findPeaks(df2_qnt$smoothed_mn),findPeaks(-df2_qnt$smoothed_mn)))
pks2_up  <- sort(c(findPeaks(df2_qnt$smoothed_up),findPeaks(-df2_qnt$smoothed_up)))
pks2_dwn <- sort(c(findPeaks(df2_qnt$smoothed_dwn),findPeaks(-df2_qnt$smoothed_dwn)))
hat_qnt$sig <-  df1_qnt$sig <- FALSE
df2_qnt$sig <- !between(0, df2_qnt$dwn, df2_qnt$up, incbounds=TRUE)
signif2     <- which(!between(0, df2_qnt$dwn, df2_qnt$up, incbounds=TRUE))
thrsh2_all  <- intersect(signif2,pks2)
thrsh2      <-  which(1==10)
if(length(thrsh2_all)>0)
thrsh2<-mean(thrsh2_all[which(abs(df2_qnt$smoothed_mn[thrsh2_all])==max(abs(df2_qnt$smoothed_mn[thrsh2_all])))],na.rm=T)
pp<- ggplot(rbind(
hat_qnt%>%select(TempC = tmp,up=smoothed_up, mn=smoothed_mn,
dwn=smoothed_dwn,sig)%>%mutate(method="a) smoothed gam (s(x))"),
df1_qnt%>%select(TempC = tmp,up=smoothed_up, mn=smoothed_mn,
dwn=smoothed_dwn,sig)%>%mutate(method="b) First Deriv (s'(x)"),
df2_qnt%>%select(TempC = tmp,up=smoothed_up, mn=smoothed_mn,
dwn=smoothed_dwn,sig)%>%mutate(method="c) Second Deriv (s''(x)")))+
geom_ribbon(aes(x=TempC, ymin=dwn, ymax=up,fill=method))+
facet_grid(method~.,scales="free_y")+
geom_hline(yintercept=0,color="white")+
scale_fill_viridis_d(begin = .8, end=.1)+
theme_minimal()
pp + geom_mark_rect(aes(x=TempC, y=up,fill = sig, label = "sig. range"))+
geom_vline (xintercept =df2_qnt$tmp[thrsh2], color = "red")
#setwd("/Users/kholsman/Documents/GitHub/Tipping-Points")
file.remove(paste0("index",".html"))
# update github
file.copy(from=paste0("Tipping_points_getstarted",".html"),to=paste0("index",".html"),overwrite=T)
# file.copy(from=paste0("ACLIM2_quickStart",".md"),to=paste0("README",".md"),overwrite=T)
# file.remove(paste0("README",".md"))
# source("R/make.R")
# copy and paste this into R window (won't work within markdown)
rmd2md(rmd_fl = "Tipping_points_getstarted",md_fl = "README")
#setwd("/Users/kholsman/Documents/GitHub/Tipping-Points")
file.remove(paste0("index",".html"))
# update github
file.copy(from=paste0("Tipping_points_getstarted",".html"),to=paste0("index",".html"),overwrite=T)
# file.copy(from=paste0("ACLIM2_quickStart",".md"),to=paste0("README",".md"),overwrite=T)
# file.remove(paste0("README",".md"))
# source("R/make.R")
# copy and paste this into R window (won't work within markdown)
rmd2md(rmd_fl = "Tipping_points_getstarted",md_fl = "README")
#setwd("/Users/kholsman/Documents/GitHub/Tipping-Points")
file.remove(paste0("index",".html"))
# update github
file.copy(from=paste0("Tipping_points_getstarted",".html"),to=paste0("index",".html"),overwrite=T)
# file.copy(from=paste0("ACLIM2_quickStart",".md"),to=paste0("README",".md"),overwrite=T)
# file.remove(paste0("README",".md"))
# source("R/make.R")
# copy and paste this into R window (won't work within markdown)
rmd2md(rmd_fl = "Tipping_points_getstarted",md_fl = "README")
# update github
file.copy(from=paste0("Tipping_points_getstarted",".html"),to=paste0("index",".html"),overwrite=T)
file.remove(paste0("index",".html"))
# update github
file.copy(from=paste0("Tipping_points_getstarted",".html"),to=paste0("index",".html"),overwrite=T)
# file.copy(from=paste0("ACLIM2_quickStart",".md"),to=paste0("README",".md"),overwrite=T)
#setwd("/Users/kholsman/Documents/GitHub/Tipping-Points")
file.remove(paste0("index",".html"))
# update github
file.copy(from=paste0("Tipping_points_getstarted",".html"),to=paste0("index",".html"),overwrite=T)
# file.copy(from=paste0("ACLIM2_quickStart",".md"),to=paste0("README",".md"),overwrite=T)
# file.remove(paste0("README",".md"))
#setwd("/Users/kholsman/Documents/GitHub/Tipping-Points")
file.remove(paste0("index",".html"))
# update github
file.copy(from=paste0("Tipping_points_getstarted",".html"),to=paste0("index",".html"),overwrite=T)
# file.copy(from=paste0("ACLIM2_quickStart",".md"),to=paste0("README",".md"),overwrite=T)
# file.remove(paste0("README",".md"))
#setwd("/Users/kholsman/Documents/GitHub/Tipping-Points")
file.remove(paste0("index",".html"))
# update github
file.copy(from=paste0("Tipping_points_getstarted",".html"),to=paste0("index",".html"),overwrite=T)
