

# Fit gam with and without autocorrelation 
#------------------------------------
tmp_gam   <-  gam(delta_var_prcnt ~ s(TempC,k=t_knots,bs="tp"),data = datIN)
tmp_gamAR <-  gamm(delta_var_prcnt ~ s(TempC,k=t_knots,bs="tp"),
                   random=list(groupN=~1),correlation=corAR1(form=~YearN),data = datIN)
datIN$dev.resid  <- residuals(tmp_gamAR$gam,type='deviance')
fitted(tmp_gamAR$gam)
datIN$dev.resid  <- residuals(tmp_gam,type='deviance')


# fit the null model
null      <- gam(delta_var_prcnt ~ 1,family='gaussian',data = datIN)
dr        <- sum(residuals(tmp_gam)^2)
dn0       <- sum(residuals(null)^2)
dr2       <- sum(residuals(tmp_gamAR$gam)^2)
dr2_lme   <- sum(residuals(tmp_gamAR$lme)^2)
gam.dev.expl    <- (dn0-dr)/dn0
gamAR2.dev.expl <- (dn0-dr2)/dn0

# from here out use the non-AR gam for the demo

hat       <-  predict(tmp_gam,se.fit=TRUE, newdata = data.frame(TempC=x) )
hat2      <-  predict(tmp_gamAR$gam,se.fit=TRUE, newdata = data.frame(TempC=x) )
dd        <-  datIN%>%mutate(TempC = round(TempC,2) )%>%select(TempC, delta_var_prcnt)
dd$num    <-  1:length(dd[,1])


#Step 1. Fit GAM to answer whether temporal autocorrelation is important? Use the residuals from the gam and a log likelihood ratio test to calculate the "P.ac" value. A significant p.ac value suggests a model with autocorrelated error structure explains more of the variation in the residuals of the gam model than a model without autocorrelated error structure. Thus, using a GAMM is necessary to account for autocorrelation in the time series...use GAMM if p.ac < 0.05. If p.ac > 0.05, then GAM will be used to look for non-linearities, so this code will also fit the model and provide selection criteria (i.e. edf, GCV and AIC scores from GAM and Linear model (linear) to compare)

AICc <- function(mod) {
  # K.c <- mod$rank
  K.c <- length(mod$coefficients)
  N.c <- length(mod$residuals)
  AIC.c <- round(mod$aic + (2*K.c*(K.c+1)/(N.c-K.c-1)),3)
  return(AIC.c)
}

nobs <- 100
x    <- 1:nobs
x2   <- rnorm(nobs,4,.5)
y    <- x*0
y[1] <- 2
ar   <- .4
for(i in 2:nobs)
  y[i] <- y[i-1]*ar+rnorm(1,0,.2)

gam1      <- gam(y ~ s(x,k=t_knots, bs= "tp"), optimMmethod="GCV.Cp",se = T)
linear    <- gam(y ~ x, method = "GCV.Cp", se = T)
rand <- rep(1,length(y))
dev.resid <- residuals(gam1,type='deviance')
lme1      <- lme(dev.resid~1,random=~1|rand,correlation=corAR1(form=~x),method='ML')
lm1       <- lm(dev.resid~1)
p.ac      <- 1-pchisq(2*(logLik(lme1)[1]-logLik(lm1)[1]),2) 
p.ac


dat       <- datIN
dat$rand  <- 1
dat$group <- paste0(dat$MC_n,"_",dat$Scenario,"_", dat$sp)
dat$groupN<- as.numeric(as.factor(dat$group))
gam1      <- gam(delta_var_prcnt ~ s(TempC,k=t_knots, bs= "tp"), optimMmethod="GCV.Cp",se = T,data = dat)
linear    <- gam(delta_var_prcnt ~ TempC, method = "GCV.Cp", se = T,data = dat)
dat$dev.resid <- residuals(gam1,type='deviance')
lme1      <- lme(dev.resid~1,random=~1|groupN,correlation=corAR1(form=~Year),method='ML', data = dat)

lm1       <- lm(dev.resid~1, data = dat)
p.ac      <- 1-pchisq(2*(logLik(lme1)[1]-logLik(lm1)[1]),2) # low number indicates AR1
plot(dat$Year, dat$dev.resid)

dr2 <- sum(residuals(lmac$gam)^2)
lmac.dev.expl <- (dn0-dr2)/dn0

# Calculate difference in deviance and AIC between GAMM and LMAC ("dev.diff.gamm.lmac" and "delta.AIC.gamm.lmac" respectively below).
dev.diff.gamm.lmac <- gamm.dev.expl-lmac.dev.expl
delta.AIC.gamm.lmac <- summary(gamm1$lme)$AIC-summary(lmac$lme)$AIC   #A negative value means the GAMM is a better model than the linear model with temporal autocorrelation


#A negative value means the GAM with a smoother is a better model than the linear model  
delta.GCV.gam.lm <- summary(gam1)$sp.criterion - summary(linear)$sp.criterion   
#A negative value means the GAM with a smoother is a better model than the linear model  
delta.AIC.gam.lm <- AICc(gam1) - AICc(linear)                                   

dev.diff.gam.lm <- summary(gam1)$dev.expl-summary(linear)$dev.expl


#Step 2. Fit GAMM to get selection criteria for relationships where p.ac < 0.05 (i.e. edf and AIC) and calculate deviance explained by GAMM ("gamm.dev.expl" below)
try(gamm1 <- gamm(myresponse ~ s(mydriver, bs= "tp",k = ks), optimMmethod="GCV.Cp",
                  se = T,correlation=corAR1(form=~ts.length)))


# check for Autocorrelation within each MC x Scenario simulation
lme1      <- lme(dev.resid~1,random=~1|groupN,correlation=corAR1(form=~Year),
                 method='ML', data = datIN)
lm1       <- lm(dev.resid~1, data = datIN)
r0        <- sum(residuals(lm1)^2)
r1        <- sum(residuals(lme1)^2)

